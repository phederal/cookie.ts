// –ò–º–ø–æ—Ä—Ç—ã (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ)
// import { CookieParser } from './main-parser.js';
// import { PerformanceOptimizer } from './performance-optimizer.js';

// –ú–æ–∫–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã)
class MockCookieParser {
	static parse(content: string) {
		// –ò–º–∏—Ç–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
		const lines = content.split('\n').filter((line) => line.trim());
		const cookies = lines.map((line, i) => ({
			name: `cookie${i}`,
			value: `value${i}`,
			domain: 'example.com',
		}));
		return {
			cookies,
			errors: [],
			stats: { total: lines.length, valid: cookies.length, formats: {} },
		};
	}
}

class MockPerformanceOptimizer {
	static parseStreamOptimized(content: string, chunkSize: number = 10000) {
		// –ò–º–∏—Ç–∞—Ü–∏—è —á–∞–Ω–∫–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
		return MockCookieParser.parse(content);
	}
}

// === –ì–ï–ù–ï–†–ê–¶–ò–Ø –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–• ===

function generateTestData() {
	console.log('üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');

	const setCookieTemplate = (i: number) => `cookie${i}=value${i}; Domain=example${i % 10}.com; Path=/; Secure; HttpOnly; expires=1782911632`;

	const netscapeTemplate = (i: number) => `example${i % 10}.com\tTRUE\t/\tTRUE\t1782911632\tcookie${i}\tvalue${i}`;

	const jsonTemplate = (start: number, count: number) => {
		const cookies = [];
		for (let i = start; i < start + count; i++) {
			cookies.push({
				domain: `example${i % 10}.com`,
				includeSubdomains: true,
				path: '/',
				secure: true,
				expires: 1782911632,
				name: `cookie${i}`,
				value: `value${i}`,
			});
		}
		return JSON.stringify(cookies);
	};

	return {
		// –ú–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª (1KB)
		small: Array.from({ length: 50 }, (_, i) => setCookieTemplate(i)).join('\n'),

		// –°—Ä–µ–¥–Ω–∏–π —Ñ–∞–π–ª (100KB)
		medium: Array.from({ length: 5000 }, (_, i) => netscapeTemplate(i)).join('\n'),

		// –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª (1MB)
		large: Array.from({ length: 50000 }, (_, i) => setCookieTemplate(i)).join('\n'),

		// –û–≥—Ä–æ–º–Ω—ã–π —Ñ–∞–π–ª (10MB)
		huge: Array.from({ length: 500000 }, (_, i) => netscapeTemplate(i)).join('\n'),

		// –°–º–µ—à–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
		mixed: [...Array.from({ length: 1000 }, (_, i) => setCookieTemplate(i)), jsonTemplate(1000, 500), ...Array.from({ length: 1500 }, (_, i) => netscapeTemplate(i + 1500))].join('\n'),
	};
}

// === –ó–ê–ú–ï–†–´ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===

function measurePerformance(name: string, fn: () => any): { time: number; result: any } {
	const start = performance.now();
	const result = fn();
	const end = performance.now();
	const time = end - start;

	console.log(`‚è±Ô∏è  ${name}: ${time.toFixed(2)}ms`);
	return { time, result };
}

function getMemoryUsage(): number {
	// –í Bun –∏—Å–ø–æ–ª—å–∑—É–µ–º process.memoryUsage()
	if (typeof process !== 'undefined' && process.memoryUsage) {
		return process.memoryUsage().heapUsed;
	}
	// Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
	return 0;
}

function formatBytes(bytes: number): string {
	if (bytes === 0) return '0 B';
	const k = 1024;
	const sizes = ['B', 'KB', 'MB', 'GB'];
	const i = Math.floor(Math.log(bytes) / Math.log(k));
	return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// === –û–°–ù–û–í–ù–´–ï –¢–ï–°–¢–´ ===

function runPerformanceTests() {
	console.log('üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò\n');

	const testData = generateTestData();

	// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–º–µ—Ä–∞—Ö
	console.log('üìä –†–∞–∑–º–µ—Ä—ã —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤:');
	Object.entries(testData).forEach(([name, data]) => {
		const size = new Blob([data]).size;
		const lines = data.split('\n').length;
		console.log(`  ${name}: ${formatBytes(size)} (${lines.toLocaleString()} —Å—Ç—Ä–æ–∫)`);
	});
	console.log();

	// –¢–µ—Å—Ç 1: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö
	console.log('üîÑ –¢–ï–°–¢ 1: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ vs –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞\n');

	Object.entries(testData).forEach(([size, data]) => {
		console.log(`--- ${size.toUpperCase()} FILE ---`);

		const memBefore = getMemoryUsage();

		// –û–±—ã—á–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
		const normal = measurePerformance('–û–±—ã—á–Ω—ã–π –ø–∞—Ä—Å–µ—Ä', () => MockCookieParser.parse(data));

		// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
		const optimized = measurePerformance('–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π', () => MockPerformanceOptimizer.parseStreamOptimized(data, getOptimalChunkSize(data.length)));

		const memAfter = getMemoryUsage();
		const memUsed = memAfter - memBefore;

		// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
		const speedup = normal.time / optimized.time;
		const cookiesPerSec = Math.round(normal.result.cookies.length / (normal.time / 1000));
		const optimizedPerSec = Math.round(optimized.result.cookies.length / (optimized.time / 1000));

		console.log(`üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:`);
		console.log(`  –ù–∞–π–¥–µ–Ω–æ cookie: ${normal.result.cookies.length.toLocaleString()}`);
		console.log(`  –£—Å–∫–æ—Ä–µ–Ω–∏–µ: ${speedup.toFixed(2)}x`);
		console.log(`  –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—ã—á–Ω–æ–≥–æ: ${cookiesPerSec.toLocaleString()} cookie/—Å–µ–∫`);
		console.log(`  –°–∫–æ—Ä–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ: ${optimizedPerSec.toLocaleString()} cookie/—Å–µ–∫`);
		if (memUsed > 0) {
			console.log(`  –ü–∞–º—è—Ç—å: ${formatBytes(memUsed)}`);
		}
		console.log();
	});

	// –¢–µ—Å—Ç 2: –í–ª–∏—è–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —á–∞–Ω–∫–∞
	console.log('üîß –¢–ï–°–¢ 2: –í–ª–∏—è–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —á–∞–Ω–∫–∞\n');

	const largeData = testData.large;
	const chunkSizes = [1000, 5000, 10000, 20000, 50000];

	console.log('–†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ | –í—Ä–µ–º—è (–º—Å) | Cookie/—Å–µ–∫');
	console.log('-------------|------------|------------');

	chunkSizes.forEach((chunkSize) => {
		const result = measurePerformance(`–ß–∞–Ω–∫ ${chunkSize}`, () => MockPerformanceOptimizer.parseStreamOptimized(largeData, chunkSize));

		const rate = Math.round(result.result.cookies.length / (result.time / 1000));
		console.log(`${chunkSize.toString().padEnd(12)} | ${result.time.toFixed(2).padEnd(10)} | ${rate.toLocaleString()}`);
	});
	console.log();

	// –¢–µ—Å—Ç 3: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏
	console.log('üîÅ –¢–ï–°–¢ 3: –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (10 –∏—Ç–µ—Ä–∞—Ü–∏–π)\n');

	const iterations = 10;
	const mediumData = testData.medium;
	const times: number[] = [];

	for (let i = 0; i < iterations; i++) {
		const result = measurePerformance(`–ò—Ç–µ—Ä–∞—Ü–∏—è ${i + 1}`, () => MockCookieParser.parse(mediumData));
		times.push(result.time);
	}

	const avgTime = times.reduce((a, b) => a + b) / times.length;
	const minTime = Math.min(...times);
	const maxTime = Math.max(...times);
	const stdDev = Math.sqrt(times.reduce((sum, time) => sum + Math.pow(time - avgTime, 2), 0) / times.length);

	console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ ${iterations} –∏—Ç–µ—Ä–∞—Ü–∏—è–º:`);
	console.log(`  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${avgTime.toFixed(2)}ms`);
	console.log(`  –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ: ${minTime.toFixed(2)}ms`);
	console.log(`  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: ${maxTime.toFixed(2)}ms`);
	console.log(`  –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: ${stdDev.toFixed(2)}ms`);
	console.log(`  –†–∞–∑–±—Ä–æ—Å: ${(((maxTime - minTime) / avgTime) * 100).toFixed(1)}%`);
	console.log();

	// –¢–µ—Å—Ç 4: –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
	console.log('üíæ –¢–ï–°–¢ 4: –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏\n');

	if (getMemoryUsage() > 0) {
		Object.entries(testData)
			.slice(0, 3)
			.forEach(([size, data]) => {
				const memBefore = getMemoryUsage();

				const result = MockCookieParser.parse(data);

				const memAfter = getMemoryUsage();
				const memUsed = memAfter - memBefore;
				const memPerCookie = memUsed / result.cookies.length;

				console.log(`${size}:`);
				console.log(`  –ü–∞–º—è—Ç—å: ${formatBytes(memUsed)}`);
				console.log(`  –ù–∞ cookie: ${formatBytes(memPerCookie)}`);
				console.log(`  Cookie: ${result.cookies.length.toLocaleString()}`);
				console.log();
			});
	} else {
		console.log('‚ö†Ô∏è  –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –¥–∞–Ω–Ω–æ–π —Å—Ä–µ–¥–µ');
	}

	console.log('‚úÖ –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
}

// === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

function getOptimalChunkSize(contentSize: number): number {
	if (contentSize < 100_000) return 5_000; // <100KB
	if (contentSize < 1_000_000) return 10_000; // <1MB
	if (contentSize < 10_000_000) return 50_000; // <10MB
	return 100_000; // >10MB
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export { runPerformanceTests, generateTestData, measurePerformance };
