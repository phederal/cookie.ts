import { describe, test, expect, beforeAll } from 'bun:test';
import { CookieFormatDetector } from '../src/format-detector';
import { WasmCookieDetector } from '../src/wasm/wasm-detector';
import { CookieFormat } from '../src/types';

describe('WASM Performance Tests', () => {
	beforeAll(async () => {
		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WASM –º–æ–¥—É–ª—å
		await CookieFormatDetector.wasm();
	});

	const testCases = [
		// JSON —Ñ–æ—Ä–º–∞—Ç—ã
		'{"name":"sessionid","value":"abc123","domain":"example.com","secure":true}',
		'[{"name":"user","value":"john"},{"name":"theme","value":"dark"}]',

		// Netscape —Ñ–æ—Ä–º–∞—Ç—ã
		'example.com\tTRUE\t/\tFALSE\t1782911632\tsessionid\tabc123',
		'#HttpOnly_secure.com\tTRUE\t/\tTRUE\t0\tsession\ttoken456',
		'.google.com\tTRUE\t/\tFALSE\t1782911632\tNID\tsomeLongValue',

		// SetCookie —Ñ–æ—Ä–º–∞—Ç—ã
		'sessionid=abc123; Domain=example.com; Path=/; Secure',
		'user=john; Max-Age=3600; HttpOnly',
		'theme=dark; SameSite=Lax',

		// –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã)
		'# This is a comment',
		'// Another comment',
		'<!-- HTML comment -->',

		// –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
		'invalid data without equals',
		'',
		'   ',
	];

	test('WASM –º–æ–¥—É–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', () => {
		expect(WasmCookieDetector.isAvailable()).toBe(true);
	});

	test('WASM –¥–µ—Ç–µ–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', () => {
		for (const testCase of testCases) {
			const wasmResult = WasmCookieDetector.detect(testCase);
			const fallbackResult = CookieFormatDetector.detect(testCase);

			// –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–∫—É –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
			if ((wasmResult && !fallbackResult) || (!wasmResult && fallbackResult)) {
				console.log('MISMATCH:');
				console.log('Input:', JSON.stringify(testCase));
				console.log('WASM result:', wasmResult);
				console.log('Fallback result:', fallbackResult);
				console.log('---');
			}

			if (wasmResult && fallbackResult) {
				expect(wasmResult.format).toBe(fallbackResult.format);
			} else {
				// –û–±–∞ –¥–æ–ª–∂–Ω—ã –≤–µ—Ä–Ω—É—Ç—å null –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫
				expect(wasmResult).toBe(fallbackResult);
			}
		}
	});

	test('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å WASM vs Fallback', () => {
		const iterations = 10000;
		const testString = 'sessionid=abc123; Domain=example.com; Path=/; Secure; HttpOnly';

		// –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º
		for (let i = 0; i < 100; i++) {
			WasmCookieDetector.detect(testString);
			CookieFormatDetector.detect(testString);
		}

		// WASM —Ç–µ—Å—Ç
		const wasmStart = performance.now();
		for (let i = 0; i < iterations; i++) {
			WasmCookieDetector.detect(testString);
		}
		const wasmTime = performance.now() - wasmStart;

		// Fallback —Ç–µ—Å—Ç (–æ—Ç–∫–ª—é—á–∞–µ–º WASM –≤—Ä–µ–º–µ–Ω–Ω–æ)
		const originalModule = (WasmCookieDetector as any).wasmModule;
		(WasmCookieDetector as any).wasmModule = null;

		const fallbackStart = performance.now();
		for (let i = 0; i < iterations; i++) {
			CookieFormatDetector.detect(testString);
		}
		const fallbackTime = performance.now() - fallbackStart;

		// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WASM
		(WasmCookieDetector as any).wasmModule = originalModule;

		console.log(`WASM: ${wasmTime.toFixed(2)}ms, Fallback: ${fallbackTime.toFixed(2)}ms`);
		console.log(`WASM is ${(fallbackTime / wasmTime).toFixed(2)}x faster`);

		// WASM –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ (–Ω–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –±—Ä–∞—É–∑–µ—Ä–∞/—Å—Ä–µ–¥—ã)
		expect(wasmTime).toBeGreaterThan(0);
		expect(fallbackTime).toBeGreaterThan(0);
	});

	test('WASM –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–ª—å—à–∏–µ —Å—Ç—Ä–æ–∫–∏', () => {
		// –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à—É—é –Ω–æ –≤–∞–ª–∏–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
		const largeCookie = 'largeCookie=' + 'x'.repeat(60000) + '; Domain=example.com';

		const result = WasmCookieDetector.detect(largeCookie);
		expect(result).toBeNull(); // –î–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ —Å—Ç—Ä–æ–∫–∏
	});

	test('WASM –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã –ø–∞–º—è—Ç–∏', () => {
		// –¢–µ—Å—Ç —Å UTF-8 —Å–∏–º–≤–æ–ª–∞–º–∏ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Ä–∞–∑–º–µ—Ä
		const unicodeCookie = 'sessionid=—Ç–µ—Å—Çüç™; Domain=example.com';

		const wasmResult = WasmCookieDetector.detect(unicodeCookie);
		const fallbackResult = CookieFormatDetector.detect(unicodeCookie);

		if (wasmResult && fallbackResult) {
			expect(wasmResult.format).toBe(fallbackResult.format);
		}
	});

	test('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ WASM –º–æ–¥—É–ª—è', () => {
		const stats = WasmCookieDetector.getStats();

		expect(stats.isInitialized).toBe(true);
		expect(stats.memorySize).toBeGreaterThan(0);

		console.log('WASM Memory Size:', stats.memorySize, 'bytes');
	});

	test('–°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ edge cases –¥–ª—è WASM', () => {
		const edgeCases = [
			// Netscape —Å —Ç–æ—á–Ω–æ 7 –ø–æ–ª—è–º–∏
			'a\tb\tc\td\te\tf\tg',
			// SetCookie —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
			'name=value; Domain=test.com; Path=/; Secure; HttpOnly; SameSite=Strict',
			// JSON —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
			'{"name":"test","nested":{"value":"data"}}',
			// –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
			'a=',
			'=b',
			'a=b;',
		];

		for (const testCase of edgeCases) {
			const wasmResult = WasmCookieDetector.detect(testCase);
			const fallbackResult = CookieFormatDetector.detect(testCase);

			// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å
			if (wasmResult && fallbackResult) {
				expect(wasmResult.format).toBe(fallbackResult.format);
			} else {
				expect(wasmResult).toBe(fallbackResult);
			}
		}
	});
});
