import { CookieFormat } from '../types';
import type { FormatDetectionResult } from '../types';

export class WasmCookieDetector {
	private static wasmModule: WebAssembly.Instance | null = null;
	private static memory: WebAssembly.Memory | null = null;
	private static isInitializing = false;
	private static initPromise: Promise<void> | null = null;

	// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π encoder –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	private static textEncoder = new TextEncoder();
	private static readonly MAX_WASM_INPUT = 65536; // (Default 65536 bytes - 64kb)

	// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤ (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç WASM)
	private static readonly FORMAT_UNKNOWN = 0;
	private static readonly FORMAT_JSON = 1;
	private static readonly FORMAT_NETSCAPE = 2;
	private static readonly FORMAT_SETCOOKIE = 3;

	/**
	 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WASM –º–æ–¥—É–ª—è
	 */
	static async init(): Promise<void> {
		if (this.wasmModule) return;
		if (this.isInitializing) return this.initPromise!;

		this.isInitializing = true;
		this.initPromise = this.doInit();
		await this.initPromise;
		this.isInitializing = false;
	}

	private static async doInit(): Promise<void> {
		try {
			// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π WASM —Ñ–∞–π–ª
			const wasmPath = new URL('./wasm-detector.wasm', import.meta.url);
			const wasmBytes = await fetch(wasmPath).then((r) => r.arrayBuffer());

			const wasmModule = await WebAssembly.instantiate(wasmBytes);

			this.wasmModule = wasmModule.instance;
			this.memory = wasmModule.instance.exports.memory as WebAssembly.Memory;

			console.log('üöÄ WASM Cookie Detector initialized');
		} catch (error) {
			console.warn('‚ö†Ô∏è WASM Cookie Detector not initialized, fallback:', error);
			this.wasmModule = null;
		}
	}

	/**
	 * –ë—ã—Å—Ç—Ä–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è —á–µ—Ä–µ–∑ WASM
	 */
	static detect(line: string): FormatDetectionResult | null {
		if (!this.wasmModule || !this.memory) {
			return null; // Fallback –∫ –æ–±—ã—á–Ω–æ–º—É –¥–µ—Ç–µ–∫—Ç–æ—Ä—É
		}

		// –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –¥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
		if (line.length > this.MAX_WASM_INPUT) {
			return null; // –°—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è –¥–ª—è WASM
		}

		try {
			const bytes = this.textEncoder.encode(line);
			const memorySize = this.memory.buffer.byteLength;

			if (bytes.length > memorySize) {
				return null; // –°—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è
			}

			// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ WASM –ø–∞–º—è—Ç—å
			const memoryView = new Uint8Array(this.memory.buffer);
			memoryView.set(bytes, 0);

			// –í—ã–∑—ã–≤–∞–µ–º WASM —Ñ—É–Ω–∫—Ü–∏—é
			const detectFormat = this.wasmModule.exports.detectFormat as (ptr: number, len: number) => number;
			const result = detectFormat(0, bytes.length);

			return this.mapWasmResult(result, line);
		} catch (error) {
			// –í production —É–±–∏—Ä–∞–µ–º console.warn –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
			if (process.env.NODE_ENV === 'development') {
				console.warn('WASM detection failed:', error);
			}
			return null;
		}
	}

	/**
	 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç WASM –≤ TypeScript —Ñ–æ—Ä–º–∞—Ç
	 */
	private static mapWasmResult(wasmResult: number, line: string): FormatDetectionResult | null {
		switch (wasmResult) {
			case this.FORMAT_JSON:
				return {
					format: CookieFormat.JSON,
					lines: [line],
				};
			case this.FORMAT_NETSCAPE:
				return {
					format: CookieFormat.NETSCAPE,
					lines: [line],
				};
			case this.FORMAT_SETCOOKIE:
				return {
					format: CookieFormat.SET_COOKIE,
					lines: [line],
				};
			default:
				return null;
		}
	}

	/**
	 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ WASM
	 */
	static isAvailable(): boolean {
		return this.wasmModule !== null;
	}

	/**
	 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è WASM (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
	 */
	static getStats(): { memorySize: number; isInitialized: boolean } {
		return {
			memorySize: this.memory ? this.memory.buffer.byteLength : 0,
			isInitialized: this.wasmModule !== null,
		};
	}
}
